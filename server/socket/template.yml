AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  EnvName:
    Description: Environment name
    Type: String
  DomainName:
    Description: Domain for API Gateway API's
    Type: String
  CertArn:
    Description: SSH Certificate ARN
    Type: String
  HostedZoneId:
    Description: Hosted Zone Id
    Type: String
  StageName:
    Description: Stage name for API Gateway
    Type: String

Resources:
  WebSocketsService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: lambda.handler
      FunctionName: !Sub tictacgo-${EnvName}
      Description: TicTacGo WebSocket API - ${EnvName}
      Runtime: nodejs14.x
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          NODE_ENV: production
          DYNAMO_NAME: !Sub
            - tictacgo-${EnvName}
            - EnvName: !Ref EnvName
          SSM_NAME: !Sub
            - ttg-socket-url-${EnvName}
            - EnvName: !Ref EnvName
      Role: !GetAtt LambdaRole.Arn

  LambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: WebSocketsService
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketsService
      Principal: apigateway.amazonaws.com

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      Description: Lambda role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  WebsocketParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: API Gateway URL for web sockets
      Name: !Sub ttg-socket-url-${EnvName}
      Type: String
      Value: !Sub
        - ${WebsocketId}.execute-api.${Region}.amazonaws.com/${StageName}
        - WebsocketId: !Ref WebsocketApi
          Region: !Ref AWS::Region

  WebsocketApi:
    DependsOn: WebSocketsService
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub tictacgo-${EnvName}
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.message

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn: LambdaIntegration
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Join ["/", ["integrations", !Ref LambdaIntegration]]

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn: LambdaIntegration
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Join ["/", ["integrations", !Ref LambdaIntegration]]

  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn: LambdaIntegration
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: sendMessage
      AuthorizationType: NONE
      Target: !Join ["/", ["integrations", !Ref LambdaIntegration]]

  LambdaIntegration:
    DependsOn: WebSocketsService
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: WebSocketsService Lambda Integration
      IntegrationType: AWS_PROXY
      ConnectionType: INTERNET
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region: !Ref AWS::Region
          LambdaArn: !GetAtt WebSocketsService.Arn

  WebSocketsStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      Description: Initial Stage
      DeploymentId: !Ref InitDeployment
      ApiId: !Ref WebsocketApi
      DefaultRouteSettings:
        LoggingLevel: ERROR
        DataTraceEnabled: true

  InitDeployment:
    DependsOn:
      - WebsocketApi
      - SendMessageRoute
      - ConnectRoute
      - DisconnectRoute
      - LambdaIntegration
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref WebsocketApi
      Description: CloudFormation deployment
      
  CustomDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties: 
      DomainName: !Ref DomainName
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref CertArn
          SecurityPolicy: TLS_1_2

  CustomDomainRoute:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties: 
      ApiId: !Ref WebsocketApi
      ApiMappingKey: v1
      DomainName: !Ref DomainName
      Stage: !Ref WebSocketsStage

  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt CustomDomainName.RegionalDomainName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt CustomDomainName.RegionalHostedZoneId

Outputs:
  WebsocketApi:
    Description: TicTacGo API Gateway ID
    Value: !Ref WebsocketApi
