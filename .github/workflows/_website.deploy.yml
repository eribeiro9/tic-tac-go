name: Website Deployment Template

on:
  workflow_call:
    inputs:
      prefix:
        description: The app prefix
        required: true
        type: string
      env_name:
        description: The environment name
        required: true
        type: string
      url:
        description: The website url
        required: true
        type: string
      cnames:
        description: The website alias CNAMEs
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
          
      - name: Set environment variables
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1

      - name: Deploy the website infrastructure
        working-directory: client
        run: |
          CERT_ARN=$(aws cloudformation describe-stacks --stack-name ${{ inputs.prefix }}-domain --query "Stacks[0].Outputs[?OutputKey=='CertificateARN'].OutputValue" --output text)
          HOSTED_ZONE_ID=$(aws cloudformation describe-stacks --stack-name ${{ inputs.prefix }}-domain --query "Stacks[0].Outputs[?OutputKey=='HostedZoneId'].OutputValue" --output text)
          PARAMS="EnvName=${{ inputs.env_name }} Url=${{ inputs.url }} CNAMEs=${{ inputs.cnames }} CertArn=$CERT_ARN HostedZoneId=$HOSTED_ZONE_ID"
          aws cloudformation deploy --template-file template.yml --stack-name ${{ inputs.prefix }}-site-${{ inputs.env_name }} --parameter-overrides $PARAMS --capabilities CAPABILITY_IAM

      - name: Install Angular CLI
        working-directory: client
        run: npm install -g @angular/cli

      - name: Build the website
        working-directory: client
        run: npm run build -- -c ${{ inputs.env_name }}

      - name: Deploy the website
        working-directory: client
        run: |
          S3_BUCKET=$(aws cloudformation describe-stacks --stack-name ${{ inputs.prefix }}-site-${{ inputs.env_name }} --query "Stacks[0].Outputs[?OutputKey=='S3BucketUrl'].OutputValue" --output text)
          CF_ID=$(aws cloudformation describe-stacks --stack-name ${{ inputs.prefix }}-site-${{ inputs.env_name }} --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionID'].OutputValue" --output text)
          aws s3 rm $S3_BUCKET --recursive
          aws s3 cp dist/client $S3_BUCKET/ --recursive
          aws cloudfront create-invalidation --distribution-id $CF_ID --paths "/*" | true
