name: Sandbox Deployment

on:
  workflow_dispatch:

env:
  ENV_NAME: sb
  URL: sb.tictacgo.xyz
  CNAMES: sb.tictacgo.xyz
  WSS_URL: sb-wss.tictacgo.xyz

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
          
      - name: Set environment variables
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1

      - name: Deploy the database
        working-directory: server/database
        run: aws cloudformation deploy --template-file template.yml --stack-name ttg-table-$ENV_NAME --parameter-overrides EnvName=$ENV_NAME --capabilities CAPABILITY_IAM

  deploy-socket:
    runs-on: ubuntu-latest
    needs: deploy-database
    steps:
      - uses: actions/checkout@v3
          
      - name: Set environment variables
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1

      - name: Build the socket service
        working-directory: server/socket
        run: npm run build

      - name: Deploy the socket service
        working-directory: server/socket
        run: |
          npm run prepare-dist
          aws cloudformation package --template template.yml --s3-bucket deployments.tictacgo.xyz --s3-prefix $ENV_NAME/socket --output-template template-export.yml
          PARAMS="EnvName=$ENV_NAME DomainName=$WSS_URL CertArn=${{ secrets.AWS_SSH_CERT_ARN }} HostedZoneId=${{ secrets.AWS_HOSTED_ZONE_ID }}"
          aws cloudformation deploy --template-file template-export.yml --stack-name ttg-socket-$ENV_NAME --parameter-overrides $PARAMS --capabilities CAPABILITY_NAMED_IAM

  deploy-site:
    runs-on: ubuntu-latest
    needs: deploy-socket
    steps:
      - uses: actions/checkout@v3
          
      - name: Set environment variables
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1

      - name: Deploy the website infrastructure
        working-directory: client
        run: |
          PARAMS="EnvName=$ENV_NAME Url=$URL CNAMEs=$CNAMES CertArn=${{ secrets.AWS_SSH_CERT_ARN }} HostedZoneId=${{ secrets.AWS_HOSTED_ZONE_ID }}"
          aws cloudformation deploy --template-file template.yml --stack-name ttg-site-$ENV_NAME --parameter-overrides $PARAMS --capabilities CAPABILITY_IAM

      - name: Install Angular CLI
        working-directory: client
        run: npm install -g @angular/cli

      - name: Build the website
        working-directory: client
        run: npm run build -- -c $ENV_NAME

      - name: Deploy the website
        working-directory: client
        run: |
          S3_BUCKET=$(aws cloudformation describe-stacks --stack-name ttg-site-$ENV_NAME --query "Stacks[0].Outputs[?OutputKey=='S3BucketUrl'].OutputValue" --output text)
          CF_ID=$(aws cloudformation describe-stacks --stack-name ttg-site-$ENV_NAME --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionID'].OutputValue" --output text)
          aws s3 rm $S3_BUCKET --recursive
          aws s3 cp dist/client $S3_BUCKET/ --recursive
          aws cloudfront create-invalidation --distribution-id $CF_ID --paths "/*" | true
